# метод двоичного дерева поиска


class aBST:

    def __init__(self, depth):
        tree_size = 2 ** (depth + 1) - 1  # рассчет количество узлов по заданной глубине
        self.Tree = [None] * tree_size  # массив ключей

    def FindKeyIndex(self, key):
        '''
        Метод поиска ключа в массиве
        Параметр "key" - искомый ключ
        return - индекс с найденным ключем или None если ключ не найден
        '''
        # ищем в массиве индекс ключа
        return None

    def AddKey(self, key):
        '''
        Метод добавления ключа в массив
        Параметр "key" - заданный ключ
        return - индекс добавленного/существующего ключа или -1 если добавление не удалось
        '''
        return -1
